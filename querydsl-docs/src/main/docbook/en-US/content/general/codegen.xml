<sect1 id="codegen">

  <title>Code generation</title>

  <para>The Java 6 APT annotation processing functionality is used in Querydsl for code
    generation in the JPA, JDO and Mongodb modules. This section describes various configuration
    options for the code generation and an alternative to APT usage.
  </para>

  <sect2>
    <title>Path initialization</title>

    <para>
      By default Querydsl initializes only reference properties of the first two levels. In cases where
      longer initialization paths are required, these have to be annotated in the domain
      types via
       <code>com.querydsl.core.annotations.QueryInit</code>
      annotations. QueryInit is used on properties where deep initializations are
      needed. The following example demonstrates the usage.
    </para>

    <programlisting language="java"><![CDATA[
@Entity
class Event {
    @QueryInit("customer.address")
    Account account;
}

@Entity
class Account {
    Customer customer;
}

@Entity
class Customer {
    String name;
    Address address;
    // ...
}
]]></programlisting>

    <para>
      This example enforces the initialization of the account.customer path, when an
      Event path is initialized as a root path / variable. The path initialization
      format supports wildcards as well, e.g. "customer.*" or just "*".
    </para>

    <para>
      The automatic path initialization replaces the manual one, which
      required the entity fields to be non-final. The declarative format has the benefit
      to be applied to all top level instances of a Query type and to enable the usage
      of final entity fields.
    </para>

    <para>
      Automatic path initialization is the preferred initialization strategy, but
      manual initialization can be activated via the Config annotation, which is
      described below.
    </para>

  </sect2>

  <sect2>
    <title>Customization</title>

    <para>
      The serialization of Querydsl can be customized via Config annotations on
      packages and types. They customize the serialization of the annotated package or type.
    </para>

    <para>
      The serialization options are
    </para>

    <table>
      <title>Config options</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
        <colspec colname='Name' colwidth="1*" />
        <colspec colname='Descriptions' colwidth="1*" />
        <thead>
          <row>
            <entry>Name</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>entityAccessors</entry>
            <entry>accessor methods for entity paths instead of public final fields (default: false)</entry>
          </row>
          <row>
            <entry>listAccessors</entry>
            <entry>listProperty(int index) style methods (default: false)</entry>
          </row>
          <row>
            <entry>mapAccessors</entry>
            <entry>mapProperty(Key key) style accessor methods (default: false)</entry>
          </row>
          <row>
            <entry>createDefaultVariable</entry>
            <entry>generate the default variable (default: true)</entry>
          </row>
          <row>
            <entry>defaultVariableName</entry>
            <entry>name of the default variable</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>Below are some examples.</para>

    <para>Customization of Entity type serialization:</para>

    <programlisting language="java"><![CDATA[
@Config(entityAccessors=true)
@Entity
public class User {
    //...
}
]]></programlisting>

    <para>Customization of package content:</para>

    <programlisting language="java"><![CDATA[
@Config(listAccessors=true)
package com.querydsl.core.domain.rel;

import com.querydsl.core.annotations.Config;
]]></programlisting>

  <!-- TODO table for options ? -->

    <para>
      If you want to customize the serializer configuration globally,
      you can do this via the following APT options
    </para>

    <table>
      <title>APT options</title>
      <tgroup cols='2' align='left' colsep='1' rowsep='1'>
        <colspec colname='Name' colwidth="1*" />
        <colspec colname='Descriptions' colwidth="1*" />
        <thead>
          <row>
            <entry>Name</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>querydsl.entityAccessors</entry>
            <entry>enable reference field accessors</entry>
          </row>
          <row>
            <entry>querydsl.listAccessors</entry>
            <entry>enable accessors for direct indexed list access</entry>
          </row>
          <row>
            <entry>querydsl.mapAccessors</entry>
            <entry>enable accessors for direct key based map access</entry>
          </row>
          <row>
            <entry>querydsl.prefix</entry>
            <entry>override the prefix for query types(default: Q)</entry>
          </row>
          <row>
            <entry>querydsl.suffix</entry>
            <entry>set a suffix for query types</entry>
          </row>
          <row>
            <entry>querydsl.packageSuffix</entry>
            <entry>set a suffix for query type packages</entry>
          </row>
          <row>
            <entry>querydsl.createDefaultVariable</entry>
            <entry>set whether default variables are created</entry>
          </row>
          <row>
            <entry>querydsl.unknownAsEmbeddable</entry>
            <entry>set where unknown non-annotated classes should be treated as embeddable (default: false)</entry>
          </row>
          <row>
            <entry>querydsl.includedPackages</entry>
            <entry>comma separated list of packages to be included into code generation (default: all)</entry>
          </row>
          <row>
            <entry>querydsl.includedClasses</entry>
            <entry>comma separated list of class names to be included into code generation (default: all)</entry>
          </row>
          <row>
            <entry>querydsl.excludedPackages</entry>
            <entry>comma separated list of packages to be excluded from code generation (default: none)</entry>
          </row>
          <row>
            <entry>querydsl.excludedClasses</entry>
            <entry>comma separated list of class names to be excluded from code generation (default: none)</entry>
          </row>
          <row>
            <entry>querydsl.useFields</entry>
            <entry>set whether fields are used as metadata source (default: true)</entry>
          </row>
          <row>
            <entry>querydsl.useGetters</entry>
            <entry>set whether accessors are used as metadata source (default: true)</entry>
          </row>
          <row>
            <entry>querydsl.generatedAnnotationClass</entry>
            <entry>
              The fully qualified class name of the <emphasis>Single-Element Annotation</emphasis> (with String element) to be added on the generated sources. Build in
              <emphasis>com.querydsl.core.annotations.Generated</emphasis>has CLASS retention which can be used for byte code analysis tools like Jacoco.
              (default: <emphasis>javax.annotation.Generated</emphasis> or<emphasis>javax.annotation.processing.Generated</emphasis> depending on the java version). See also
              <ulink url="https://docs.oracle.com/javase/specs/jls/se8/html/jls-9.html#jls-9.7.3">Single-Element Annotation</ulink>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>Using the Maven APT plugin this works for example like this:
    </para>

    <programlisting language="xml"><![CDATA[
<project>
  <build>
  <plugins>
    ...
    <plugin>
      <groupId>com.mysema.maven</groupId>
      <artifactId>apt-maven-plugin</artifactId>
      <version>1.1.3</version>
      <executions>
        <execution>
          <goals>
            <goal>process</goal>
          </goals>
          <configuration>
            <outputDirectory>target/generated-sources/java</outputDirectory>
            <processor>com.querydsl.apt.jpa.JPAAnnotationProcessor</processor>
            <options>
              <querydsl.entityAccessors>true</querydsl.entityAccessors>
              <querydsl.useFields>false</querydsl.useFields>
            </options>
          </configuration>
        </execution>
      </executions>
    </plugin>
    ...
  </plugins>
  </build>
</project>
]]></programlisting>

    <para>
      Alternatively <code>maven-compiler-plugin</code> can be configured
      to hook APT directly into compilation:
    </para>

    <programlisting language="xml"><![CDATA[
      <project>
        <build>
        <plugins>
          ...
          <plugin>
            <artifactId>maven-compiler-plugin</artifactId>
            <configuration>
              <generatedSourcesDirectory>target/generated-sources/java</generatedSourcesDirectory>
              <compilerArgs>
                <arg>-Aquerydsl.entityAccessors=true</arg>
                <arg>-Aquerydsl.useFields=false</arg>
              </compilerArgs>
            </configuration>
            <dependencies>
              <dependency>
                <groupId>com.querydsl</groupId>
                <artifactId>querydsl-apt</artifactId>
                <version>${querydsl.version}</version>
                <classifier>jpa</classifier>
              </dependency>
              <dependency>
                <groupId>org.hibernate.javax.persistence</groupId>
                <artifactId>hibernate-jpa-2.1-api</artifactId>
                <version>1.0.0.Final</version>
              </dependency>
            </dependencies>
          </plugin>
          ...
        </plugins>
        </build>
      </project>
]]></programlisting>

    <para>
      Notice that you need to use a proper classifier when defining dependency
      to <code>com.querydsl:querydsl-apt</code>. Those additional artifacts
      define the annotation processor to be used in
      <code>META-INF/services/javax.annotation.processing.Processor</code>.
    </para>

    <para>Available classifiers include:</para>

    <itemizedlist>
      <listitem>
        <code>general</code>
      </listitem>
      <listitem>
        <code>hibernate</code>
      </listitem>
      <listitem>
        <code>jdo</code>
      </listitem>
      <listitem>
        <code>jpa</code>
      </listitem>
    </itemizedlist>

    <para>
      With this configuration query objects can have their sources generated
      and compiled during compilation of the domain objects. This will also
      automatically add the generated sources directory to Maven project
      source roots.
    </para>

    <para>
      The great advantage of this approach is that it can also handle
      annotated Groovy classes using <code>groovy-eclipse</code> compiler:
    </para>

    <programlisting language="xml"><![CDATA[
      <project>
        <build>
        <plugins>
          ...
          <plugin>
            <artifactId>maven-compiler-plugin</artifactId>
            <configuration>
              <compilerId>groovy-eclipse-compiler</compilerId>
              <generatedSourcesDirectory>target/generated-sources/java</generatedSourcesDirectory>
              <compilerArgs>
                <arg>-Aquerydsl.entityAccessors=true</arg>
                <arg>-Aquerydsl.useFields=false</arg>
              </compilerArgs>
            </configuration>
            <dependencies>
              <dependency>
                <groupId>org.codehaus.groovy</groupId>
                <artifactId>groovy-eclipse-compiler</artifactId>
                <version>2.9.1-01</version>
              </dependency>
              <dependency>
                <groupId>org.codehaus.groovy</groupId>
                <artifactId>groovy-eclipse-batch</artifactId>
                <version>2.3.7-01</version>
              </dependency>
              <dependency>
                <groupId>com.querydsl</groupId>
                <artifactId>querydsl-apt</artifactId>
                <version>${querydsl.version}</version>
                <classifier>jpa</classifier>
              </dependency>
              <dependency>
                <groupId>org.hibernate.javax.persistence</groupId>
                <artifactId>hibernate-jpa-2.1-api</artifactId>
                <version>1.0.0.Final</version>
              </dependency>
            </dependencies>
          </plugin>
          ...
        </plugins>
        </build>
      </project>
]]></programlisting>

  </sect2>

  <sect2 id="custom_types">
    <title>Custom type mappings</title>

    <para>
      Custom type mappings can be used on properties to override the derived Path
      type. This can be useful for example in cases where comparison and String operations should
      be blocked on certain String paths or Date / Time support for
      custom types needs to be added. Support for Date / Time types of the Joda time API
      and JDK (java.util.Date, Calendar and subtypes) is built in, but other APIs might need
      to be supported using this feature.
    </para>

    <para>The following example demonstrates the usage:</para>

    <programlisting language="java"><![CDATA[
@Entity
public class MyEntity {
    @QueryType(PropertyType.SIMPLE)
    public String stringAsSimple;

    @QueryType(PropertyType.COMPARABLE)
    public String stringAsComparable;

    @QueryType(PropertyType.NONE)
    public String stringNotInQuerydsl;
}
]]></programlisting>

    <para>The value <code>PropertyType.NONE</code> can be used to skip a property in the
      query type generation. This case is different from @Transient or @QueryTransient
      annotated properties, where properties are not persisted. PropertyType.NONE just
      omits the property from the Querydsl query type.
    </para>

  </sect2>

  <sect2>
    <title>Delegate methods</title>

    <para>To declare a static method as a delegate method add the QueryDelegate
      annotation with the corresponding domain type as a value and provide a method
      signature that takes the corresponding Querydsl query type as the first argument.
    </para>

    <para>Here is a simple example from a unit test: </para>

    <programlisting language="java"><![CDATA[
@QueryEntity
public static class User {

    String name;

    User manager;

}
]]></programlisting>

<programlisting language="java"><![CDATA[
@QueryDelegate(User.class)
public static BooleanPath isManagedBy(QUser user, User other) {
    return user.manager.eq(other);
}
]]></programlisting>

    <para>And the generated methods in the QUser query type:</para>

    <programlisting language="java"><![CDATA[
public BooleanPath isManagedBy(QUser other) {
    return DelegateTest.isManagedBy(this, other);
}

]]></programlisting>

    <para>Delegate methods can also be used to extend built-in types.
      Here are some examples
    </para>

    <programlisting language="java"><![CDATA[
public class QueryExtensions {

    @QueryDelegate(Date.class)
    public static BooleanExpression inPeriod(DatePath<Date> date, Pair<Date,Date> period) {
        return date.goe(period.getFirst()).and(date.loe(period.getSecond()));
    }

    @QueryDelegate(Timestamp.class)
    public static BooleanExpression inDatePeriod(DateTimePath<Timestamp> timestamp, Pair<Date,Date> period) {
        Timestamp first = new Timestamp(DateUtils.truncate(period.getFirst(), Calendar.DAY_OF_MONTH).getTime());
        Calendar second = Calendar.getInstance();
        second.setTime(DateUtils.truncate(period.getSecond(), Calendar.DAY_OF_MONTH));
        second.add(1, Calendar.DAY_OF_MONTH);
        return timestamp.goe(first).and(timestamp.lt(new Timestamp(second.getTimeInMillis())));
    }

}
]]></programlisting>

    <para>When delegate methods are declared for builtin types then subclasses with the
        proper delegate method usages are created:
    </para>

    <programlisting language="java"><![CDATA[
public class QDate extends DatePath<java.sql.Date> {

    public QDate(BeanPath<? extends java.sql.Date> entity) {
        super(entity.getType(), entity.getMetadata());
    }

    public QDate(PathMetadata<?> metadata) {
        super(java.sql.Date.class, metadata);
    }

    public BooleanExpression inPeriod(com.querydsl.core.util.Pair<java.sql.Date, java.sql.Date> period) {
        return QueryExtensions.inPeriod(this, period);
    }

}

public class QTimestamp extends DateTimePath<java.sql.Timestamp> {

    public QTimestamp(BeanPath<? extends java.sql.Timestamp> entity) {
        super(entity.getType(), entity.getMetadata());
    }

    public QTimestamp(PathMetadata<?> metadata) {
        super(java.sql.Timestamp.class, metadata);
    }

    public BooleanExpression inDatePeriod(com.querydsl.core.util.Pair<java.sql.Date, java.sql.Date> period) {
        return QueryExtensions.inDatePeriod(this, period);
    }

}
]]></programlisting>

  </sect2>

  <sect2>

    <title>Non-annotated types</title>

    <para>
      It is possible to create Querydsl query types for non annotated types by
      creating <code>@QueryEntities</code> annotations. Just place a QueryEntities annotation into a
      package of your choice and the classes to mirrored in the value attribute.
    </para>

    <para>
      To actually create the types use the <code>com.querydsl.apt.QuerydslAnnotationProcessor</code>.
      In Maven you do it like this:
    </para>

    <programlisting language="xml"><![CDATA[
<project>
  <build>
  <plugins>
    ...
    <plugin>
      <groupId>com.mysema.maven</groupId>
      <artifactId>apt-maven-plugin</artifactId>
      <version>1.1.3</version>
      <executions>
        <execution>
          <goals>
            <goal>process</goal>
          </goals>
          <configuration>
            <outputDirectory>target/generated-sources/java</outputDirectory>
            <processor>com.querydsl.apt.QuerydslAnnotationProcessor</processor>
          </configuration>
        </execution>
      </executions>
    </plugin>
    ...
  </plugins>
  </build>
</project>
]]></programlisting>

  </sect2>

  <sect2>

    <title>Classpath based code generation</title>

     <para>For cases where annotated Java sources
    are not available, such as the usage of a different JVM
    language such as Scala or Groovy or annotation addition via bytecode manipulation the
    <code>GenericExporter</code> class can be used to scan the classpath for annotated classes and
    generate query types for them.
    </para>

    <para>To make GenericExporter available add a dependency to the querydsl-codegen
      module to your project, or to be more precise
      <code>com.querydsl:querydsl-codegen:${querydsl.version}</code>.
    </para>

    <para>Below is an example for JPA</para>

    <programlisting language="java"><![CDATA[
GenericExporter exporter = new GenericExporter();
exporter.setKeywords(Keywords.JPA);
exporter.setEntityAnnotation(Entity.class);
exporter.setEmbeddableAnnotation(Embeddable.class);
exporter.setEmbeddedAnnotation(Embedded.class);
exporter.setSupertypeAnnotation(MappedSuperclass.class);
exporter.setSkipAnnotation(Transient.class);
exporter.setTargetFolder(new File("target/generated-sources/java"));
exporter.export(DomainClass.class.getPackage());
]]></programlisting>

    <para>This will export all the JPA annotated classes in the package of the DomainClass
      class and subpackages to the target/generated-sources/java directory.
    </para>

    <sect3>

      <title>Usage via Maven</title>

      <para>The goals generic-export, jpa-export and jdo-export of the querydsl-maven-plugin
        can be used for GenericExporter usage via Maven.
      </para>

      <para>
      The different goals are mapped to the Querydsl, JPA and JDO annotations.
      </para>

      <para>The configuration elements are</para>

      <table>
        <title>Maven configuration</title>
        <tgroup cols='3' align='left' colsep='1' rowsep='1'>
          <colspec colname='Type' colwidth="1*" />
          <colspec colname='Element' colwidth="1*" />
          <colspec colname='Descriptions' colwidth="1*" />
          <thead>
            <row>
              <entry>Type</entry>
              <entry>Element</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>File</entry>
              <entry>targetFolder</entry>
              <entry>target folder for generated sources</entry>
            </row>
            <row>
              <entry>boolean</entry>
              <entry>scala</entry>
              <entry>true, if Scala sources should be generated instead (default: false)</entry>
            </row>
            <row>
              <entry>String[]</entry>
              <entry>packages</entry>
              <entry>packages to be introspected for entity classes</entry>
            </row>
            <row>
              <entry>boolean</entry>
              <entry>handleFields</entry>
              <entry>true, if fields should be treated as properties (default: true)</entry>
            </row>
            <row>
              <entry>boolean</entry>
              <entry>handleMethods</entry>
              <entry>true, if getters should be treated as properties (default: true)</entry>
            </row>
            <row>
              <entry>String</entry>
              <entry>sourceEncoding</entry>
              <entry>charset encoding for the generated source files</entry>
            </row>
            <row>
              <entry>boolean</entry>
              <entry>testClasspath</entry>
              <entry>true, if the test classpath should be used instead</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>Here is an example for JPA annotated classes</para>

      <programlisting language="xml"><![CDATA[
<project>
  <build>
    <plugins>
      ...
      <plugin>
        <groupId>com.querydsl</groupId>
        <artifactId>querydsl-maven-plugin</artifactId>
        <version>${querydsl.version}</version>
        <executions>
          <execution>
            <phase>process-classes</phase>
            <goals>
              <goal>jpa-export</goal>
            </goals>
            <configuration>
              <targetFolder>target/generated-sources/java</targetFolder>
              <packages>
                <package>com.example.domain</package>
              </packages>
            </configuration>
          </execution>
        </executions>
      </plugin>
      ...
    </plugins>
  </build>
</project>
]]></programlisting>

      <para>This will export the JPA annotated classes of the <code>com.example.domain</code> package and
      subpackages to the target/generated-sources/java directory.
      </para>

      <para>If you need to compile the generated sources directly after that, then you can use
      the <code>compile</code> goal for that.</para>

 <programlisting language="xml"><![CDATA[
<execution>
  <goals>
    <goal>compile</goal>
  </goals>
  <configuration>
    <sourceFolder>target/generated-sources/scala</targetFolder>
  </configuration>
</execution>
]]></programlisting>

    <para>The <code>compile</code> goal has the following configuration elements</para>

    <table>
      <title>Maven configuration</title>
      <tgroup cols='3' align='left' colsep='1' rowsep='1'>
        <colspec colname='Type' colwidth="1*" />
        <colspec colname='Element' colwidth="1*" />
        <colspec colname='Descriptions' colwidth="1*" />
        <thead>
          <row>
            <entry>Type</entry>
            <entry>Element</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>File</entry>
            <entry>sourceFolder</entry>
            <entry>source folder with generated sources</entry>
          </row>
          <row>
            <entry>String</entry>
            <entry>sourceEncoding</entry>
            <entry>charset encoding of sources</entry>
          </row>
          <row>
            <entry>String</entry>
            <entry>source</entry>
            <entry>-source option for the compiler</entry>
          </row>
          <row>
            <entry>String</entry>
            <entry>target</entry>
            <entry>-target option for the compiler</entry>
          </row>
          <row>
            <entry>boolean</entry>
            <entry>testClasspath</entry>
            <entry>true, if the test classpath should be used instead</entry>
          </row>
          <row>
            <entry>Map</entry>
            <entry>compilerOptions</entry>
            <entry>options for the compiler</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>All options except <code>sourceFolder</code> are optional.</para>

  </sect3>

  <sect3>

    <title>Scala support</title>

      <para>If you need Scala output of the classes, use a variant of the following
      configuration
      </para>

      <programlisting language="xml"><![CDATA[
<project>
  <build>
    <plugins>
      ...
      <plugin>
        <groupId>com.querydsl</groupId>
        <artifactId>querydsl-maven-plugin</artifactId>
        <version>${querydsl.version}</version>
        <dependencies>
          <dependency>
            <groupId>com.querydsl</groupId>
            <artifactId>querydsl-scala</artifactId>
            <version>${querydsl.version}</version>
          </dependency>
          <dependency>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-library</artifactId>
            <version>${scala.version}</version>
          </dependency>
        </dependencies>
        <executions>
          <execution>
            <goals>
              <goal>jpa-export</goal>
            </goals>
            <configuration>
              <targetFolder>target/generated-sources/scala</targetFolder>
              <scala>true</scala>
              <packages>
                <package>com.example.domain</package>
              </packages>
            </configuration>
          </execution>
        </executions>
      </plugin>
      ...
    </plugins>
  </build>
</project>
]]></programlisting>

    </sect3>

  </sect2>

</sect1>
