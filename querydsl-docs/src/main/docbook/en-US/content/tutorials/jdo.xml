<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<sect1 id="jdo_integration" revision="1">
  <title>Querying JDO</title>

  <para>
    Querydsl defines a general statically typed syntax for querying on top of
    persisted domain model data. JDO and JPA are the primary integration
    technologies for
    Querydsl. This guide describes how to use Querydsl
    in combination with JDO.
  </para>

  <sect2>
    <title>Maven integration</title>

    <para>
      Add the following dependencies to your Maven project:
    </para>

    <programlisting language="xml"><![CDATA[
<dependency>
  <groupId>com.querydsl</groupId>
  <artifactId>querydsl-apt</artifactId>
  <version>${querydsl.version}</version>
  <scope>provided</scope>
</dependency>

<dependency>
  <groupId>com.querydsl</groupId>
  <artifactId>querydsl-jdo</artifactId>
  <version>${querydsl.version}</version>
</dependency>
]]></programlisting>

    <para>
      And now, configure the Maven APT plugin which generates the query types
      used by
      Querydsl:
    </para>

    <programlisting language="xml"><![CDATA[
<project>
  <build>
    <plugins>
      ...
      <plugin>
        <groupId>com.mysema.maven</groupId>
        <artifactId>apt-maven-plugin</artifactId>
        <version>1.1.3</version>
        <executions>
          <execution>
            <goals>
              <goal>process</goal>
            </goals>
            <configuration>
              <outputDirectory>target/generated-sources/java</outputDirectory>
              <processor>com.querydsl.apt.jdo.JDOAnnotationProcessor</processor>
            </configuration>
          </execution>
        </executions>
      </plugin>
    ...
    </plugins>
  </build>
</project>
]]></programlisting>

    <para>
      The JDOAnnotationProcessor finds domain types annotated with the
      <code>javax.jdo.annotations.PersistenceCapable</code> annotation and generates
      query types for them.
    </para>

    <para>
      Run clean install and you will get your query types generated into
      target/generated-sources/java.
    </para>

    <para>
      If you use Eclipse, run ./mvnw eclipse:eclipse to update your Eclipse project to
      include target/generated-sources/java as a source folder.
    </para>

    <para>
      Now you are able to construct JDO query instances and instances of the query domain model.
    </para>

  </sect2>

  <sect2>

    <title>Ant integration</title>

    <para>Place the jar files from the full-deps bundle on your classpath and use the
      following tasks for Querydsl code generation:
    </para>

    <programlisting language="xml"><![CDATA[
    <!-- APT based code generation -->
    <javac srcdir="${src}" classpathref="cp">
      <compilerarg value="-proc:only"/>
      <compilerarg value="-processor"/>
      <compilerarg value="com.querydsl.apt.jdo.JDOAnnotationProcessor"/>
      <compilerarg value="-s"/>
      <compilerarg value="${generated}"/>
    </javac>

    <!-- compilation -->
    <javac classpathref="cp" destdir="${build}">
      <src path="${src}"/>
      <src path="${generated}"/>
    </javac>
]]></programlisting>

    <para>
      Replace
      <emphasis>src</emphasis>
      with your main source folder,
      <emphasis>generated</emphasis>
      with your folder for generated sources
      and
      <emphasis>build</emphasis>
      with your target folder.
    </para>

  </sect2>

  <sect2>

    <title>Using query types</title>

    <para>
      To create queries with Querydsl you need to instantiate variables and Query
      implementations. We will start with the variables.
    </para>

    <para>
      Let's assume that your project has the following domain type:
    </para>

    <programlisting language="java"><![CDATA[
@PersistenceCapable
public class Customer {
  private String firstName;
  private String lastName;

  public String getFirstName() {
    return firstName;
  }

  public String getLastName() {
    return lastName;
  }

  public void setFirstName(String fn) {
    firstName = fn;
  }

  public void setLastName(String ln) {
    lastName = ln;
  }
}
]]></programlisting>

    <para>
      Querydsl will generate a query type with the simple name QCustomer into the
      same package as Customer. QCustomer can be used as a statically
      typed variable in Querydsl as a representative for the
      Customer type.
    </para>

    <para>
      QCustomer has a default instance variable which can be accessed as a static
      field:
    </para>

    <programlisting language="java"><![CDATA[
QCustomer customer = QCustomer.customer;
]]></programlisting>

    <para>
      Alternatively you can define your own Customer variables like this:
    </para>

    <programlisting language="java"><![CDATA[
QCustomer customer = new QCustomer("myCustomer");
]]></programlisting>

    <para>
      QCustomer reflects all the properties of the original type Customer as public
      fields. The firstName field can be accessed like this
    </para>

    <programlisting language="java"><![CDATA[
customer.firstName;
]]></programlisting>

  </sect2>

  <sect2>

    <title>Querying with JDO</title>

    <para>
      For the JDO-module <code>JDOQuery</code> is the main Query implementation. It
      is instantiated like this:
    </para>

    <programlisting language="java"><![CDATA[
PersistenceManager pm = ...;
JDOQuery<?> query = new JDOQuery<Void>(pm);
]]></programlisting>

    <para>For the examples of this chapter the queries are created via a <code>JDOQueryFactory</code> instance.
    <code>JDOQueryFactory</code> should be the preferred option to obtain <code>JDOQuery</code> instances.</para>

    <para>
      To retrieve the customer with the first name Bob you would construct a
      query like this:
    </para>

    <programlisting language="java"><![CDATA[
QCustomer customer = QCustomer.customer;
Customer bob = queryFactory.selectFrom(customer)
                   .where(customer.firstName.eq("Bob"))
                   .fetchOne();
]]></programlisting>

    <para>
      The selectFrom call defines the query source and projection, the where part defines the
      filter and fetchOne tells Querydsl to return a single element. Easy, right?
    </para>

    <para>Alternatively you can express it also like this</para>

    <programlisting language="java"><![CDATA[
QCustomer customer = QCustomer.customer;
Customer bob = queryFactory.select(customer).from(customer)
                   .where(customer.firstName.eq("Bob"))
                   .fetchOne();
]]></programlisting>

    <para>
      To create a query with multiple sources you just use the JDOQuery class like this:
    </para>

    <programlisting language="java"><![CDATA[
QCustomer customer = QCustomer.customer;
QCompany company = QCompany.company;
query.from(customer, company);
]]></programlisting>

    <para>
      And to use multiple filters use it like this
    </para>

    <programlisting language="java"><![CDATA[
queryFactory.selectFrom(customer)
    .where(customer.firstName.eq("Bob"), customer.lastName.eq("Wilson"));
]]></programlisting>

    <para>Or like this</para>

    <programlisting language="java"><![CDATA[
queryFactory.selectFrom(customer)
    .where(customer.firstName.eq("Bob").and(customer.lastName.eq("Wilson")));
]]></programlisting>

    <para>If you want to combine the filters via "or" then use the following pattern
    </para>

    <programlisting language="java"><![CDATA[
queryFactory.selectFrom(customer)
    .where(customer.firstName.eq("Bob").or(customer.lastName.eq("Wilson")));
]]></programlisting>

  </sect2>

  <sect2>

    <title>General usage</title>

    <para>Use the the cascading methods of the JDOQuery class like this</para>

    <para>
      <emphasis>select:</emphasis>
      Set the projection of the query. (Not necessary if created via query factory)
    </para>

    <para>
      <emphasis>from:</emphasis>
      Add query sources here, the first argument becomes the main source
      and the others are treated as variables.
    </para>

    <para>
      <emphasis>where:</emphasis>
      Add query filters, either in varargs form separated via commas or
      cascaded via the and-operator.
    </para>

    <para>
      <emphasis>groupBy:</emphasis>
      Add group by arguments in varargs form.
    </para>

    <para>
      <emphasis>having:</emphasis>
      Add having filters of the "group by" grouping as an varargs array of
      Predicate expressions.
    </para>

    <para>
      <emphasis>orderBy:</emphasis>
      Add ordering of the result as an varargs array of order expressions.
      Use asc() and desc() on numeric, string and other comparable expression to access the
      OrderSpecifier instances.
    </para>

    <para>
      <emphasis>limit, offset, restrict:</emphasis>
      Set the paging of the result. Limit for max results,
      offset for skipping rows and restrict for defining both in one call.
    </para>

  </sect2>

  <sect2>

    <title>Ordering</title>

    <para>The syntax for declaring ordering is </para>

    <programlisting language="java"><![CDATA[
QCustomer customer = QCustomer.customer;
queryFactory.selectFrom(customer)
    .orderBy(customer.lastName.asc(), customer.firstName.desc())
    .fetch();
]]></programlisting>

  </sect2>

  <sect2>

    <title>Grouping</title>

    <para>Grouping can be done in the following form</para>

    <programlisting language="java"><![CDATA[
queryFactory.select(customer.lastName).from(customer)
    .groupBy(customer.lastName)
    .fetch();
]]></programlisting>

  </sect2>

  <sect2>

    <title>Delete clauses</title>

    <para>Delete clauses in Querydsl JDO follow a simple delete-where-execute form. Here
      are some examples:
    </para>

    <programlisting language="java"><![CDATA[
QCustomer customer = QCustomer.customer;
// delete all customers
queryFactory.delete(customer).execute();
// delete all customers with a level less than 3
queryFactory.delete(customer).where(customer.level.lt(3)).execute();
]]></programlisting>

    <para>The second parameter of the JDODeleteClause constructor is the entity to be
      deleted. The where call is optional and the execute call performs the deletion and
      returns the amount of deleted entities.
    </para>

  </sect2>

  <sect2>

    <title>Subqueries</title>

    <para>To create a subquery you can use one of the factory methods of <code>JDOExpressions</code>
      and add the query parameters via from, where etc.
    </para>

    <programlisting language="java"><![CDATA[
QDepartment department = QDepartment.department;
QDepartment d = new QDepartment("d");
queryFactory.selectFrom(department)
    .where(department.size.eq(JDOExpressions.select(d.size.max()).from(d))
    .fetch();
]]></programlisting>

    <para>represents the following native JDO query</para>

    <programlisting>
SELECT this FROM com.querydsl.jdo.models.company.Department
WHERE this.size ==
(SELECT max(d.size) FROM com.querydsl.jdo.models.company.Department d)
    </programlisting>

    <para>Another example</para>

    <programlisting language="java"><![CDATA[
QEmployee employee = QEmployee.employee;
QEmployee e = new QEmployee("e");
queryFactory.selectFrom(employee)
    .where(employee.weeklyhours.gt(
        JDOExpressions.select(e.weeklyhours.avg())
                      .from(employee.department.employees, e)
                      .where(e.manager.eq(employee.manager)))
    .fetch();
]]></programlisting>

    <para>which represents the following native JDO query</para>

    <programlisting>
SELECT this FROM com.querydsl.jdo.models.company.Employee
WHERE this.weeklyhours >
(SELECT avg(e.weeklyhours) FROM this.department.employees e WHERE e.manager == this.manager)
    </programlisting>

  </sect2>

  <sect2>

    <title>Using Native SQL</title>

    <para>Querydsl supports Native SQL in JDO via the <code>JDOSQLQuery</code> class.</para>

    <para>To use it, you must generate Querydsl query types for your SQL schema. This can
      be done for example with the following Maven configuration:
    </para>

    <programlisting language="xml"><![CDATA[
<project>
  <build>
    <plugins>
      ...
      <plugin>
        <groupId>com.querydsl</groupId>
        <artifactId>querydsl-maven-plugin</artifactId>
        <version>${querydsl.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>export</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <jdbcDriver>org.apache.derby.jdbc.EmbeddedDriver</jdbcDriver>
          <jdbcUrl>jdbc:derby:target/demoDB;create=true</jdbcUrl>
          <packageName>com.mycompany.mydomain</packageName>
          <targetFolder>${project.basedir}/target/generated-sources/java</targetFolder>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>org.apache.derby</groupId>
            <artifactId>derby</artifactId>
            <version>${derby.version}</version>
          </dependency>
        </dependencies>
      </plugin>
      ...
    </plugins>
  </build>
</project>
]]></programlisting>

    <para>When the query types have successfully been generated into the location of your
      choice, you can use them in your queries.
    </para>

    <para>Single column query:</para>

    <programlisting language="java"><![CDATA[
// serialization templates
SQLTemplates templates = new DerbyTemplates();
// query types (S* for SQL, Q* for domain types)
SAnimal cat = new SAnimal("cat");
SAnimal mate = new SAnimal("mate");

JDOSQLQuery<?> query = new JDOSQLQuery<Void>(pm, templates);
List<String> names = query.select(cat.name).from(cat).fetch();
]]></programlisting>

    <para>Query multiple columns:</para>

    <programlisting language="java"><![CDATA[
query = new JDOSQLQuery<Void>(pm, templates);
List<Tuple> rows = query.select(cat.id, cat.name).from(cat).fetch();
]]></programlisting>

    <para>Query all columns:</para>

    <programlisting language="java"><![CDATA[
List<Tuple> rows = query.select(cat.all()).from(cat).fetch();
 ]]></programlisting>

    <para>Query with joins: </para>

    <programlisting language="java"><![CDATA[
query = new JDOSQLQuery<Void>(pm, templates);
cats = query.select(catEntity).from(cat)
    .innerJoin(mate).on(cat.mateId.eq(mate.id))
    .where(cat.dtype.eq("Cat"), mate.dtype.eq("Cat"))
    .fetch();
]]></programlisting>

    <para>Query and project into DTO: </para>

    <programlisting language="java"><![CDATA[
query = new JDOSQLQuery<Void>(pm, templates);
List<CatDTO> catDTOs = query.select(Projections.constructor(CatDTO.class, cat.id, cat.name))
    .from(cat)
    .orderBy(cat.name.asc())
    .fetch();
]]></programlisting>

  </sect2>

</sect1>
