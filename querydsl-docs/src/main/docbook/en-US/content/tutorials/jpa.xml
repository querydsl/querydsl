<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<sect1 id="jpa_integration" revision="1">

  <title>Querying JPA</title>

  <para>
    Querydsl defines a general statically typed syntax for querying on top of
    persisted domain model data. JDO and JPA are the primary integration
    technologies for Querydsl. This guide describes how to use Querydsl
    in combination with JPA.
  </para>

  <para>
    Querydsl for JPA is an alternative to both JPQL and Criteria queries. It combines the
    dynamic nature of Criteria queries with the expressiveness of JPQL and all that in a fully
    typesafe manner.
  </para>

  <sect2>
    <title>Maven integration</title>

    <para>
      Add the following dependencies to your Maven project:
    </para>

    <programlisting language="xml"><![CDATA[
<dependency>
  <groupId>com.querydsl</groupId>
  <artifactId>querydsl-apt</artifactId>
  <version>${querydsl.version}</version>
  <scope>provided</scope>
</dependency>

<dependency>
  <groupId>com.querydsl</groupId>
  <artifactId>querydsl-jpa</artifactId>
  <version>${querydsl.version}</version>
</dependency>
]]></programlisting>

    <para>
      And now, configure the Maven APT plugin:
    </para>

    <programlisting language="xml"><![CDATA[
<project>
  <build>
  <plugins>
    ...
    <plugin>
      <groupId>com.mysema.maven</groupId>
      <artifactId>apt-maven-plugin</artifactId>
      <version>1.1.3</version>
      <executions>
        <execution>
          <goals>
            <goal>process</goal>
          </goals>
          <configuration>
            <outputDirectory>target/generated-sources/java</outputDirectory>
            <processor>com.querydsl.apt.jpa.JPAAnnotationProcessor</processor>
          </configuration>
        </execution>
      </executions>
    </plugin>
    ...
  </plugins>
  </build>
</project>
]]></programlisting>

    <para>
      The JPAAnnotationProcessor finds domain types annotated with the
      javax.persistence.Entity annotation and generates query types for them.
    </para>

    <para>
      If you use Hibernate annotations in your domain types you should use
      the APT processor
      <code>com.querydsl.apt.hibernate.HibernateAnnotationProcessor</code>
      instead.
    </para>

    <para>
      Run clean install and you will get your Query types generated into
      target/generated-sources/java.
    </para>

    <para>
      If you use Eclipse, run ./mvnw eclipse:eclipse to update your Eclipse project to
      include target/generated-sources/java as a source folder.
    </para>

    <para>
      Now you are able to construct JPA query instances and instances of
      the query domain model.
    </para>

  </sect2>

  <sect2>

    <title>Ant integration</title>

    <para>Place the jar files from the full-deps bundle on your classpath and use the
      following tasks for Querydsl code generation:
    </para>

    <programlisting language="xml"><![CDATA[
    <!-- APT based code generation -->
    <javac srcdir="${src}" classpathref="cp">
      <compilerarg value="-proc:only"/>
      <compilerarg value="-processor"/>
      <compilerarg value="com.querydsl.apt.jpa.JPAAnnotationProcessor"/>
      <compilerarg value="-s"/>
      <compilerarg value="${generated}"/>
    </javac>

    <!-- compilation -->
    <javac classpathref="cp" destdir="${build}">
      <src path="${src}"/>
      <src path="${generated}"/>
    </javac>
]]></programlisting>

    <para>
      Replace
      <emphasis>src</emphasis>
      with your main source folder,
      <emphasis>generated</emphasis>
      with your folder for generated sources
      and
      <emphasis>build</emphasis>
      with your target folder.
    </para>

  </sect2>

  <sect2>

    <title>Using Querydsl JPA in Roo</title>

    <para>
      If you are using Querydsl JPA with Spring Roo you can replace
      <code>com.querydsl.apt.jpa.JPAAnnotationProcessor</code>
      with
      <code>com.querydsl.apt.roo.RooAnnotationProcessor</code>
      which will handle
      <code>@RooJpaEntity</code> and <code>@RooJpaActiveRecord</code>
      annotated classes instead of
      <code>@Entity</code>
      annotated classes.
    </para>

    <para>
      APT based code generation doesn't work well with AspectJ IDTs.
    </para>

  </sect2>

  <sect2>

    <title>Generating the model from hbm.xml files</title>

    <para>If you are using Hibernate with an XML based configuration, you can use the XML
      metadata to create your Querydsl model.
    </para>

    <para><code>com.querydsl.jpa.codegen.HibernateDomainExporter</code> provides the
      functionality for this:</para>

    <programlisting language="java"><![CDATA[
HibernateDomainExporter exporter = new HibernateDomainExporter(
  "Q",                     // name prefix
  new File("target/gen3"), // target folder
  configuration);          // instance of org.hibernate.cfg.Configuration

exporter.export();
]]></programlisting>

    <para>The HibernateDomainExporter needs to be executed within a classpath where the
      domain types are visible, since the property types are resolved
      via reflection.
    </para>

    <para>All JPA annotations are ignored, but Querydsl annotations such as @QueryInit and
      @QueryType are taken into account.
    </para>

  </sect2>

  <sect2>

    <title>Using query types</title>

    <para>
      To create queries with Querydsl you need to instantiate variables and
      Query implementations. We will start with the variables.
    </para>

    <para>
      Let's assume that your project has the following domain type:
    </para>

    <programlisting language="java"><![CDATA[
@Entity
public class Customer {
    private String firstName;
    private String lastName;

    public String getFirstName() {
        return firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setFirstName(String fn) {
        firstName = fn;
    }

    public void setLastName(String ln) {
        lastName = ln;
    }
}
]]></programlisting>

    <para>
      Querydsl will generate a query type with the simple name QCustomer into the
      same package as Customer. QCustomer can be used as a statically
      typed variable in Querydsl queries as a representative for the
      Customer type.
    </para>

    <para>
      QCustomer has a default instance variable which can be accessed as a static
      field:
    </para>

    <programlisting language="java"><![CDATA[
QCustomer customer = QCustomer.customer;
]]></programlisting>

    <para>
      Alternatively you can define your own Customer variables like this:
    </para>

    <programlisting language="java"><![CDATA[
QCustomer customer = new QCustomer("myCustomer");
]]></programlisting>

  </sect2>

  <sect2>

    <title>Querying</title>

    <para>The Querydsl JPA module supports both the JPA and the Hibernate API.</para>

    <para>
      To use the JPA API you use <code>JPAQuery</code> instances for your queries like
      this:
    </para>

<programlisting language="java"><![CDATA[
// where entityManager is a JPA EntityManager
JPAQuery<?> query = new JPAQuery<Void>(entityManager);
]]></programlisting>

    <para>If you are using the Hibernate API instead, you can instantiate a
    <code>HibernateQuery</code> like this:
    </para>

    <programlisting language="java"><![CDATA[
// where session is a Hibernate session
HibernateQuery<?> query = new HibernateQuery<Void>(session);
]]></programlisting>

    <para>Both <code>JPAQuery</code> and <code>HibernateQuery</code> implement the <code>JPQLQuery</code> interface.</para>

    <para>For the examples of this chapter the queries are created via a <code>JPAQueryFactory</code> instance.
      <code>JPAQueryFactory</code> should be the preferred option to obtain <code>JPAQuery</code> instances.</para>

    <para>For the Hibernate API <code>HibernateQueryFactory</code> can be used</para>

    <para>
      To retrieve the customer with the first name Bob you would construct a
      query like this:
    </para>

    <programlisting language="java"><![CDATA[
QCustomer customer = QCustomer.customer;
Customer bob = queryFactory.selectFrom(customer)
  .where(customer.firstName.eq("Bob"))
  .fetchOne();
]]></programlisting>

    <para>
      The selectFrom call defines the query source and projection, the where part defines the
      filter and fetchOne tells Querydsl to return a single element. Easy, right?
    </para>

    <para>
      To create a query with multiple sources you use the query like this:
    </para>

    <programlisting language="java"><![CDATA[
QCustomer customer = QCustomer.customer;
QCompany company = QCompany.company;
query.from(customer, company);
]]></programlisting>

    <para>
      And to use multiple filters use it like this
    </para>

    <programlisting language="java"><![CDATA[
queryFactory.selectFrom(customer)
    .where(customer.firstName.eq("Bob"), customer.lastName.eq("Wilson"));
]]></programlisting>

    <para>Or like this</para>

    <programlisting language="java"><![CDATA[
queryFactory.selectFrom(customer)
    .where(customer.firstName.eq("Bob").and(customer.lastName.eq("Wilson")));
]]></programlisting>

    <para>In native JPQL form the query would be written like this: </para>

    <programlisting>
select customer from Customer as customer
where customer.firstName = "Bob" and customer.lastName = "Wilson"
</programlisting>

    <para>If you want to combine the filters via "or" then use the following pattern
    </para>

    <programlisting language="java"><![CDATA[
queryFactory.selectFrom(customer)
    .where(customer.firstName.eq("Bob").or(customer.lastName.eq("Wilson")));
]]></programlisting>

  </sect2>

  <sect2>

    <title>Using joins</title>

    <para>Querydsl supports the following join variants in JPQL: inner join, join, left
      join and right join. Join usage is typesafe, and follows the following pattern:
    </para>

    <programlisting language="java"><![CDATA[
QCat cat = QCat.cat;
QCat mate = new QCat("mate");
QCat kitten = new QCat("kitten");
queryFactory.selectFrom(cat)
    .innerJoin(cat.mate, mate)
    .leftJoin(cat.kittens, kitten)
    .fetch();
]]></programlisting>

    <para>The native JPQL version of the query would be </para>

    <programlisting>
select cat from Cat as cat
inner join cat.mate as mate
left outer join cat.kittens as kitten
</programlisting>

    <para>Another example</para>

    <programlisting language="java"><![CDATA[
queryFactory.selectFrom(cat)
    .leftJoin(cat.kittens, kitten)
    .on(kitten.bodyWeight.gt(10.0))
    .fetch();
]]></programlisting>

    <para>With the following JPQL version</para>

    <programlisting>
select cat from Cat as cat
left join cat.kittens as kitten
on kitten.bodyWeight > 10.0
</programlisting>

  </sect2>

  <sect2>

    <title>General usage</title>

    <para>Use the the cascading methods of the JPQLQuery interface like this</para>

    <para>
      <emphasis>select:</emphasis>
      Set the projection of the query. (Not necessary if created via query factory)
    </para>

    <para>
      <emphasis>from:</emphasis>
      Add the query sources here.
    </para>

    <para>
      <emphasis>innerJoin, join, leftJoin, rightJoin, on:</emphasis>
      Add join elements using these constructs.
      For the join methods the first argument is the join source and the second the target
      (alias).
    </para>

    <para>
      <emphasis>where:</emphasis>
      Add query filters, either in varargs form separated via commas or
      cascaded via the and-operator.
    </para>

    <para>
      <emphasis>groupBy:</emphasis>
      Add group by arguments in varargs form.
    </para>

    <para>
      <emphasis>having:</emphasis>
      Add having filters of the "group by" grouping as an varags array of
      Predicate expressions.
    </para>

    <para>
      <emphasis>orderBy:</emphasis>
      Add ordering of the result as an varargs array of order expressions.
      Use asc() and desc() on numeric, string and other comparable expression to access the
      OrderSpecifier instances.
    </para>

    <para>
      <emphasis>limit, offset, restrict:</emphasis>
      Set the paging of the result. Limit for max results,
      offset for skipping rows and restrict for defining both in one call.
    </para>

  </sect2>

  <sect2>

    <title>Ordering</title>

    <para>The syntax for declaring ordering is </para>

    <programlisting language="java"><![CDATA[
QCustomer customer = QCustomer.customer;
queryFactory.selectFrom(customer)
    .orderBy(customer.lastName.asc(), customer.firstName.desc())
    .fetch();
]]></programlisting>

    <para>which is equivalent to the following native JPQL</para>

    <programlisting>
select customer from Customer as customer
order by customer.lastName asc, customer.firstName desc
</programlisting>

  </sect2>

  <sect2>

    <title>Grouping</title>

    <para>Grouping can be done in the following form</para>

    <programlisting language="java"><![CDATA[
queryFactory.select(customer.lastName).from(customer)
    .groupBy(customer.lastName)
    .fetch();
]]></programlisting>

    <para>which is equivalent to the following native JPQL</para>

    <programlisting>
select customer.lastName
from Customer as customer
group by customer.lastName
</programlisting>


  </sect2>

  <sect2>
    <title>Delete clauses</title>
    <para>Delete clauses in Querydsl JPA follow a simple delete-where-execute form. Here
      are some
      examples:
    </para>

    <programlisting language="java"><![CDATA[
QCustomer customer = QCustomer.customer;
// delete all customers
queryFactory.delete(customer).execute();
// delete all customers with a level less than 3
queryFactory.delete(customer).where(customer.level.lt(3)).execute();
]]></programlisting>

    <para>The where call is optional and the execute call performs the deletion and returns the
      amount of deleted entities.
    </para>

    <para>DML clauses in JPA don't take JPA level cascade rules into account and don't provide
    fine-grained second level cache interaction.</para>
  </sect2>

  <sect2>
    <title>Update clauses</title>

    <para>Update clauses in Querydsl JPA follow a simple update-set/where-execute form.
      Here are some examples:
    </para>

    <programlisting language="java"><![CDATA[
QCustomer customer = QCustomer.customer;
// rename customers named Bob to Bobby
queryFactory.update(customer).where(customer.name.eq("Bob"))
    .set(customer.name, "Bobby")
    .execute();
]]></programlisting>

    <para>The set invocations define the property updates in SQL-Update-style and the execute call
      performs the Update and returns the amount of updated entities.
    </para>

    <para>DML clauses in JPA don't take JPA level cascade rules into account and don't provide
    fine-grained second level cache interaction.</para>

  </sect2>

  <sect2>

    <title>Subqueries</title>

    <para>To create a subquery you use the static factory methods of <code>JPAExpressions</code> and
      define the query parameters via from, where etc.
    </para>

    <programlisting language="java"><![CDATA[
QDepartment department = QDepartment.department;
QDepartment d = new QDepartment("d");
queryFactory.selectFrom(department)
    .where(department.size.eq(
        JPAExpressions.select(d.size.max()).from(d)))
     .fetch();
]]></programlisting>

    <para>Another example</para>

    <programlisting language="java"><![CDATA[
QEmployee employee = QEmployee.employee;
QEmployee e = new QEmployee("e");
queryFactory.selectFrom(employee)
    .where(employee.weeklyhours.gt(
        JPAExpressions.select(e.weeklyhours.avg())
            .from(employee.department.employees, e)
            .where(e.manager.eq(employee.manager))))
    .fetch();
]]></programlisting>

  </sect2>

  <sect2>
    <title>Exposing the original query</title>

    <para>If you need to tune the original Query before the execution of the query you
      can expose it like this:
    </para>

    <programlisting language="java"><![CDATA[
Query jpaQuery = queryFactory.selectFrom(employee).createQuery();
// ...
List results = jpaQuery.getResultList();
]]></programlisting>

  </sect2>

  <sect2>
    <title>Using Native SQL in JPA queries</title>

    <para>Querydsl supports Native SQL in JPA via the JPASQLQuery class.
    </para>

    <para>To use it, you must generate Querydsl query types for your SQL schema. This can
      be done for example with the following Maven configuration:
    </para>

    <programlisting language="xml"><![CDATA[
<project>
  <build>
    <plugins>
      ...
      <plugin>
        <groupId>com.querydsl</groupId>
        <artifactId>querydsl-maven-plugin</artifactId>
        <version>${querydsl.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>export</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <jdbcDriver>org.apache.derby.jdbc.EmbeddedDriver</jdbcDriver>
          <jdbcUrl>jdbc:derby:target/demoDB;create=true</jdbcUrl>
          <packageName>com.mycompany.mydomain</packageName>
          <targetFolder>${project.basedir}/target/generated-sources/java</targetFolder>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>org.apache.derby</groupId>
            <artifactId>derby</artifactId>
            <version>${derby.version}</version>
          </dependency>
        </dependencies>
      </plugin>
      ...
    </plugins>
  </build>
</project>
]]></programlisting>

    <para>When the query types have successfully been generated into the location of your
      choice, you can use them in your queries.
    </para>

    <para>Single column query:</para>

    <programlisting language="java"><![CDATA[
// serialization templates
SQLTemplates templates = new DerbyTemplates();
// query types (S* for SQL, Q* for domain types)
SAnimal cat = new SAnimal("cat");
SAnimal mate = new SAnimal("mate");
QCat catEntity = QCat.cat;

JPASQLQuery<?> query = new JPASQLQuery<Void>(entityManager, templates);
List<String> names = query.select(cat.name).from(cat).fetch();
]]></programlisting>

    <para>If you mix entity (e.g. QCat) and table (e.g. SAnimal) references in your query you need to make sure that they
    use the same variable names. SAnimal.animal has the variable name "animal", so a new instance
    (new SAnimal("cat")) was used instead.</para>

    <para>An alternative pattern could be</para>

    <programlisting language="java"><![CDATA[
QCat catEntity = QCat.cat;
SAnimal cat = new SAnimal(catEntity.getMetadata().getName());
]]></programlisting>

    <para>Query multiple columns:</para>

    <programlisting language="java"><![CDATA[
query = new JPASQLQuery<Void>(entityManager, templates);
List<Tuple> rows = query.select(cat.id, cat.name).from(cat).fetch();
]]></programlisting>

    <para>Query all columns:</para>

    <programlisting language="java"><![CDATA[
List<Tuple> rows = query.select(cat.all()).from(cat).fetch();
 ]]></programlisting>

    <para>Query in SQL, but project as entity: </para>

    <programlisting language="java"><![CDATA[
query = new JPASQLQuery<Void>(entityManager, templates);
List<Cat> cats = query.select(catEntity).from(cat).orderBy(cat.name.asc()).fetch();
]]></programlisting>

    <para>Query with joins: </para>

    <programlisting language="java"><![CDATA[
query = new JPASQLQuery<Void>(entityManager, templates);
cats = query.select(catEntity).from(cat)
    .innerJoin(mate).on(cat.mateId.eq(mate.id))
    .where(cat.dtype.eq("Cat"), mate.dtype.eq("Cat"))
    .fetch();
]]></programlisting>

    <para>Query and project into DTO: </para>

    <programlisting language="java"><![CDATA[
query = new JPASQLQuery<Void>(entityManager, templates);
List<CatDTO> catDTOs = query.select(Projections.constructor(CatDTO.class, cat.id, cat.name))
    .from(cat)
    .orderBy(cat.name.asc())
    .fetch();
]]></programlisting>

    <para>If you are using the Hibernate API instead of the JPA API, then use
      <code>HibernateSQLQuery</code> instead.
    </para>

  </sect2>

</sect1>
